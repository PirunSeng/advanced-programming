<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Eclipse Announcements: Eclipse Specification Process IV: The Specification Committee Votes</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/om--jv9Up6M/eclipse-specification-process-iv-specification-committee-votes</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/om--jv9Up6M/eclipse-specification-process-iv-specification-committee-votes</link>
	<description>One key difference between Eclipse open source software projects and open source specification projects is that specification projects must be aligned with exactly one specification committee&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/om--jv9Up6M&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 21 Jan 2019 19:00:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Specification Process IV: The Specification Committee Votes</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5482</guid>
	<link>https://waynebeaton.wordpress.com/2019/01/21/eclipse-specification-process-iv-the-specification-committee-votes/</link>
	<description>&lt;p&gt;One key difference between Eclipse open source &lt;em&gt;software&lt;/em&gt; projects as defined by the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP), and open source &lt;em&gt;specification&lt;/em&gt; projects as defined by the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) is that specification projects must be aligned with exactly one &lt;em&gt;specification committee&lt;/em&gt;. More generally, specification projects are aligned with an Eclipse &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/&quot;&gt;working group&lt;/a&gt;&lt;/em&gt; and are governed (in part) by the working group’s specification committee.&lt;/p&gt;
&lt;p&gt;The specification committee is required to vote to approve key milestones in the lifecycle of their specification projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specification project creation;&lt;/li&gt;
&lt;li&gt;Release plan;&lt;/li&gt;
&lt;li&gt;Revision to the scope;&lt;/li&gt;
&lt;li&gt;Progress and release reviews;&lt;/li&gt;
&lt;li&gt;Service releases; and&lt;/li&gt;
&lt;li&gt;Designation of a profile or platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most frequent votes occur when specification projects engage in the reviews that occur during the development cycle (highlighted in bold).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;efsp&quot; class=&quot;alignnone size-full wp-image-5483 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/01/efsp.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To succeed, a vote requires positive responses from a super-majority (defined as two-thirds) of the members of the specification committee. Votes to designate a specification as a &lt;em&gt;profile&lt;/em&gt; or &lt;em&gt;platform&lt;/em&gt; require positive responses from a super-majority of the specification committee members who represent the interests of &lt;a href=&quot;https://www.eclipse.org/membership/&quot;&gt;Strategic Members&lt;/a&gt; of the Eclipse Foundation. It’s worth noting that there is no veto.&lt;/p&gt;
&lt;p&gt;The criteria by which representatives decide how they’re going to vote varies by individual and according to the values of the individual and the organization that they represent (if applicable). Minimally, the specification committee is expected to use their vote to ensure that specification projects stay within scope. In the case of a progress review, the voters will need to consider whether or not the project is progressing in a manner that will eventually result in a successful vote on the eventual release review that gates the ratification of the final specification.&lt;/p&gt;
&lt;p&gt;The EFSP is silent on what happens in the event of a failed vote. In the event of a failure, we expect that feedback regarding the reason for the failure will be provided to the project team, who will work to mitigate issues and then re-engage.&lt;/p&gt;
&lt;p&gt;Please see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/07/eclipse-foundation-specification-process-part-i-the-edp/&quot;&gt;Eclipse Foundation Specification Process, Part I: The EDP&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/26/eclipse-foundation-specification-process-part-ii-the-efsp/&quot;&gt;Eclipse Foundation Specification Process, Part II: the EFSP&lt;/a&gt;; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/28/eclipse-foundation-specification-process-part-iii-creation/&quot;&gt;Eclipse Foundation Specification Process, Part III: Creation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Mon, 21 Jan 2019 17:40:50 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: We are hiring</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/we-are-hiring - again.html</guid>
	<link>https://tools.jboss.org/blog/we-are-hiring - again.html</link>
	<description>&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Developer Experience and Tooling group, of which JBoss Tools team is part,
      is looking for an awesome developer. We are looking to continue
      improving the usability for developers around various IDEs including Eclipse, VSCode and IntelliJ and around the Red Hat product line, including JBoss Middleware.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Topics range from Java to JavaScript, application servers to containers, source code tinkering to full blown CI/CD setups.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you are into making developers life easier and like to be able to get involved in many different technologies and get them to work great together then do apply.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can also ping me (&lt;a href=&quot;mailto:jeffmaury@redhat.com&quot;&gt;jeffmaury@redhat.com&lt;/a&gt;) for questions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The current list of openings are:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://global-redhat.icims.com/jobs/66514/software-engineer---jboss-and-openshift-tooling/job&quot;&gt;Sofware engineer&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note: the job postings do list a specific location, but for the right candidate we are happy to consider many locations worldwide (anywhere there is a Red Hat office), as well as working from home.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have fun!&lt;br /&gt;
      Jeff Maury&lt;br /&gt;
      &lt;a href=&quot;http://twitter.com/jeffmaury&quot;&gt;@jeffmaury&lt;/a&gt;
      &lt;a href=&quot;http://twitter.com/jbosstools&quot;&gt;@jbosstools&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 17 Jan 2019 13:31:32 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus UML Light users</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1152</guid>
	<link>https://papyrusuml.wordpress.com/2019/01/16/papyrus-uml-light-users/</link>
	<description>&lt;p&gt;In my previous post, I did mention that we had some users in mind that would benefit from using Papyrus UML Light.&lt;/p&gt;



&lt;p&gt;I should have given you a hint as to who they are…&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;Nicole – a Papyrus Novice&lt;/strong&gt;&lt;/h3&gt;



&lt;p&gt;Nicole is already knowledgeable in UML at or above the OMG’s &lt;a href=&quot;https://www.omg.org/ocup-2/coveragemap-found.htm&quot;&gt;OCUP2 Foundation&lt;/a&gt; or intermediate level contents.&lt;/p&gt;



&lt;p&gt;As the project on which ze worked was completed, ze is being moved to a new team that uses Papyrus, a tool with which ze is not familiar.&lt;/p&gt;



&lt;p&gt;Nicole’s goal in using
Papyrus UML Light is to quickly get familiar
with Papyrus UML Light and how it supports UML-based modeling.
Ze
appreciates and benefits from
Papyrus UML Light’s streamlined editor with the most common concepts of UML, so
that
ze
can focus on getting to know the Papyrus UML Light
user interface and way of working without
being exposed
to the full
spectrum of UML model elements.&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;Steve – a UML Novice and Student&lt;/strong&gt;&lt;/h3&gt;



&lt;p&gt;Steve is new to the modeling world and has no familiarity with the UML.&lt;/p&gt;



&lt;p&gt;Ze is starting to learn about UML and faces the dual tasks of learning to use UML at the same time as learning to use a UML modeling tool.&lt;/p&gt;



&lt;p&gt;Using Papyrus
UML Light, Steve will be exposed to fewer language and
tool concepts
at
a
time, wich
results in a lowering of the learning curve. &lt;/p&gt;



&lt;p&gt;In addition, the alignment of Papyrus UML Light to OCUP2 (Foundational) is beneficial, as it ensures that ze first deals with the most most important concepts of UML before tackling the more complex aspects.&lt;/p&gt;



&lt;h3&gt;Brisha – a Basic UML User&lt;/h3&gt;



&lt;p&gt;Brisha only uses UML from time to time and then only for basic purposes such as documentation, presentations, discussions, etc. Ze is not interested in a full model-based engineering tool or method and rather uses it to “sketch” using UML to ensure common understanding of the graphics. As such, ze only needs the basic concepts of UML. In this context, an easy to use UML modeling tool such as Papyrus UML Light, which provides a reduces user interface an ease of use is easiest to get and adopt.&lt;/p&gt;



&lt;p&gt;So, what do you think of our typical users for Papyrus UML Light?&lt;/p&gt;</description>
	<pubDate>Wed, 16 Jan 2019 20:45:46 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus UML Light update</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1133</guid>
	<link>https://papyrusuml.wordpress.com/2019/01/14/papyrus-uml-light-update/</link>
	<description>&lt;p&gt;First, I would like to which a happy new year that will keep you all in good health (and modeling with Moi!)!&lt;/p&gt;
&lt;p&gt;In a previous posting, I mentioned a new variant of Papyrus (me), Well, Papyrus UML Light has progressed progressing  well since then!&lt;/p&gt;
&lt;p&gt;This is what happened thus far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requirements have been defined, including the subset of UML that is being implemented (which involved many people … and voting…)&lt;/li&gt;
&lt;li&gt;Personae have been defined for our three principal users (Nicole, Steve, and Brisha and their current names).&lt;/li&gt;
&lt;li&gt;There is a logo:  &lt;a href=&quot;https://papyrusuml.files.wordpress.com/2019/01/umllight64.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-1135&quot; src=&quot;https://papyrusuml.files.wordpress.com/2019/01/umllight64.png?w=604&quot; /&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There have been three internal development releases thus far.&lt;/li&gt;
&lt;li&gt;The “Getting Started” tutorial is progressing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual, I’ll try to keep you up-to-date!&lt;/p&gt;</description>
	<pubDate>Mon, 14 Jan 2019 08:15:58 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Tradista Joins Eclipse Foundation</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/jp4ffjHeg8Q/Tradista-Joins-Eclipse-Foundation.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/jp4ffjHeg8Q/Tradista-Joins-Eclipse-Foundation.html</link>
	<description>Tradista will contribute to the Jakarta EE project, bringing its long experience in the Java EE platform applied to the financial sector.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/jp4ffjHeg8Q&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 10 Jan 2019 13:35:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: EC by Example: CountBy</title>
	<guid isPermaLink="false">https://medium.com/p/a2d6411e95e1</guid>
	<link>https://medium.com/oracledevs/ec-by-example-countby-a2d6411e95e1?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to use the countBy method in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*OQCbBTIEwqJ4sDx7qxTaEw.png&quot; /&gt;Count the fruit by color&lt;/figure&gt;&lt;h3&gt;CountBy&lt;/h3&gt;&lt;p&gt;The method &lt;em&gt;countBy&lt;/em&gt; returns a &lt;a href=&quot;https://medium.com/oracledevs/bag-the-counter-2689e901aadb&quot;&gt;Bag&lt;/a&gt; in Eclipse Collections. A &lt;em&gt;Bag&lt;/em&gt; is an unordered &lt;em&gt;Collection&lt;/em&gt; which allows duplicates. The internal structure of the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/bag/mutable/HashBag.html&quot;&gt;HashBag&lt;/a&gt; implementation in Eclipse Collections is an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/map/mutable/primitive/ObjectIntHashMap.html&quot;&gt;ObjectIntHashMap&lt;/a&gt;. The keys of the internal map are the items, and the values are the counts stored as ints. The method &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#countBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;countBy&lt;/a&gt; takes a &lt;em&gt;Function&lt;/em&gt; as an argument.&lt;/p&gt;&lt;p&gt;The following code will illustrate how to count a collection of &lt;em&gt;Fruit&lt;/em&gt; by their color, using a method reference. We store the result in a variable named &lt;strong&gt;COUNTS_BY_COLOR.&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/978/1*Tv5aOiPA8rpoMQiPgxFRBg.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;We have two methods that query the &lt;em&gt;ImmutableBag&lt;/em&gt; that is created. They are used in the following tests.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*G6naoOt237F4PZ62TEJcjg.png&quot; /&gt;RED is the top fruit color&lt;/figure&gt;&lt;p&gt;Here’s the code in plain text if you would like experiment on your own.&lt;/p&gt;&lt;pre&gt;public enum Fruit&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;APPLE&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;BANANA&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;CHERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;PEAR&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;STRAWBERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;LEMON&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;KIWI&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;    private final Color color;&lt;/pre&gt;&lt;pre&gt;    private static final ImmutableBag&amp;lt;Color&amp;gt; &lt;br /&gt;            &lt;strong&gt;&lt;em&gt;COUNTS_BY_COLOR &lt;/em&gt;&lt;/strong&gt;=&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(Fruit.&lt;em&gt;values&lt;/em&gt;())&lt;br /&gt;                        .countBy(Fruit::getColor);&lt;/pre&gt;&lt;pre&gt;    Fruit(Color color)&lt;br /&gt;    {&lt;br /&gt;        this.color = color;&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Color getColor()&lt;br /&gt;    {&lt;br /&gt;        return this.color;&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public static int getColorCount(Color color)&lt;br /&gt;    {&lt;br /&gt;        return &lt;strong&gt;&lt;em&gt;COUNTS_BY_COLOR&lt;/em&gt;&lt;/strong&gt;.occurrencesOf(color);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public static boolean isTopColor(Color color)&lt;br /&gt;    {&lt;br /&gt;        return &lt;strong&gt;&lt;em&gt;COUNTS_BY_COLOR&lt;/em&gt;&lt;/strong&gt;.topOccurrences(1)&lt;br /&gt;                .anySatisfy(each -&amp;gt; each.getOne() == &lt;em&gt;color&lt;/em&gt;);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public enum Color&lt;br /&gt;    {&lt;br /&gt;        &lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;GREEN&lt;br /&gt;    &lt;/em&gt;&lt;/strong&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;And the code for the test.&lt;/p&gt;&lt;pre&gt;public class FruitTest&lt;br /&gt;{&lt;br /&gt;    @Test&lt;br /&gt;    public void redFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, &lt;br /&gt;                Fruit.&lt;em&gt;getColorCount&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;        Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;                Fruit.&lt;em&gt;isTopColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br /&gt;    public void yellowFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, &lt;br /&gt;                Fruit.&lt;em&gt;getColorCount&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;        Assert.&lt;em&gt;assertFalse&lt;/em&gt;(&lt;br /&gt;                Fruit.&lt;em&gt;isTopColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br /&gt;    public void greenFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, &lt;br /&gt;                Fruit.&lt;em&gt;getColorCount&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;        Assert.&lt;em&gt;assertFalse&lt;/em&gt;(&lt;br /&gt;                Fruit.&lt;em&gt;isTopColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in the examples&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/ImmutableBag.html#countBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;countBy&lt;/a&gt; — Counts the elements &lt;em&gt;Collection&lt;/em&gt; by the &lt;em&gt;Function&lt;/em&gt; specified and returns a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/factory/Bags.html&quot;&gt;Bags&lt;/a&gt;.immutable.with — Creates an &lt;em&gt;ImmutableBag&lt;/em&gt; with the specified vararg’d elements. There are &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;mutable&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;immutable&lt;/a&gt; Collection factories in Eclipse Collections.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html#occurrencesOf-java.lang.Object-&quot;&gt;occurrencesOf&lt;/a&gt; — Returns the count from a &lt;em&gt;Bag&lt;/em&gt; for a particular item.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html#topOccurrences-int-&quot;&gt;topOccurrences&lt;/a&gt; — Returns a &lt;em&gt;List&lt;/em&gt; of items and their counts in descending order by the number of occurrences.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=a2d6411e95e1&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/ec-by-example-countby-a2d6411e95e1&quot;&gt;EC by Example: CountBy&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Sun, 06 Jan 2019 20:26:06 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: EC by Example: GroupBy</title>
	<guid isPermaLink="false">https://medium.com/p/7ca219358c3b</guid>
	<link>https://medium.com/oracledevs/ec-by-example-groupby-7ca219358c3b?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to group elements of a collection using &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*rGwzDNPD57M1jv7mKPoahw.png&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;Happy New Year!&lt;/h3&gt;&lt;p&gt;This is my first blog in 2019. I will keep it brief. Time for some code.&lt;/p&gt;&lt;h3&gt;Group By&lt;/h3&gt;&lt;p&gt;The method &lt;em&gt;groupBy&lt;/em&gt; returns a &lt;a href=&quot;https://medium.com/oracledevs/multimap-how-it-works-a3430f549d35&quot;&gt;&lt;strong&gt;Multimap&lt;/strong&gt;&lt;/a&gt; in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;. A &lt;em&gt;Multimap&lt;/em&gt; looks like a &lt;em&gt;Map&lt;/em&gt; in that it has methods like &lt;em&gt;get&lt;/em&gt; and &lt;em&gt;put&lt;/em&gt;, but the values in a &lt;em&gt;Multimap&lt;/em&gt; are always some &lt;em&gt;Collection&lt;/em&gt; type, like a &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt; or a &lt;em&gt;Bag&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;The following code will illustrate how to group a collection of &lt;em&gt;Fruit&lt;/em&gt; by their color. We store the result of the grouping in a variable named &lt;strong&gt;FRUIT_BY_COLOR&lt;/strong&gt;. Notice that the type is a specific kind of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;&lt;em&gt;Multimap&lt;/em&gt;&lt;/a&gt;, because we called &lt;em&gt;groupBy&lt;/em&gt; on an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/ImmutableBag.html&quot;&gt;&lt;em&gt;ImmutableBag&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*087ocn6wigM6pzcllXfQRA.png&quot; /&gt;Fruit as an Enum with Color as an inner Enum&lt;/figure&gt;&lt;p&gt;The we can query the &lt;strong&gt;FRUIT_BY_COLOR&lt;/strong&gt; &lt;em&gt;Multimap&lt;/em&gt; for each color using the &lt;em&gt;getFruitByColor&lt;/em&gt; method on the &lt;em&gt;Fruit&lt;/em&gt; enum.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/838/1*pCZeETgNnbABR8pkf9rdmw.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Here’s the code in plain text if you would like experiment on your own.&lt;/p&gt;&lt;pre&gt;public enum Fruit&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;APPLE&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;BANANA&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;CHERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;PEAR&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;STRAWBERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;LEMON&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;KIWI&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;);&lt;br /&gt;&lt;br /&gt;    private final Color color;&lt;br /&gt;&lt;br /&gt;    private static final ImmutableBagMultimap&amp;lt;Color, Fruit&amp;gt; &lt;br /&gt;            &lt;strong&gt;&lt;em&gt;FRUIT_BY_COLOR &lt;/em&gt;&lt;/strong&gt;=&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(Fruit.&lt;em&gt;values&lt;/em&gt;())&lt;br /&gt;                        .groupBy(Fruit::getColor);&lt;br /&gt;&lt;br /&gt;    Fruit(Color color)&lt;br /&gt;    {&lt;br /&gt;        this.color = color;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public Color getColor()&lt;br /&gt;    {&lt;br /&gt;        return this.color;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static ImmutableBag&amp;lt;Fruit&amp;gt; getFruitByColor(Color color)&lt;br /&gt;    {&lt;br /&gt;        return &lt;strong&gt;&lt;em&gt;FRUIT_BY_COLOR&lt;/em&gt;&lt;/strong&gt;.get(color);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public enum Color&lt;br /&gt;    {&lt;br /&gt;        &lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;GREEN&lt;br /&gt;    &lt;/em&gt;&lt;/strong&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;And the code for the test.&lt;/p&gt;&lt;pre&gt;public class FruitTest&lt;br /&gt;{&lt;br /&gt;    @Test&lt;br /&gt;    public void redFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;APPLE&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;CHERRY&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;STRAWBERRY&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                Fruit.&lt;em&gt;getFruitByColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void yellowFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;BANANA&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;LEMON&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                Fruit.&lt;em&gt;getFruitByColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void greenFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;PEAR&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;KIWI&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                Fruit.&lt;em&gt;getFruitByColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in the examples&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/ImmutableBag.html#groupBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;groupBy&lt;/a&gt; — Groups a &lt;em&gt;Collection&lt;/em&gt; into a &lt;em&gt;Multimap&lt;/em&gt; using the specified function to calculate a key for each object. The type of &lt;em&gt;Collection&lt;/em&gt; determines the type of &lt;em&gt;Multimap&lt;/em&gt; that is returns.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/factory/Bags.html&quot;&gt;Bags&lt;/a&gt;.immutable.with — Creates an &lt;em&gt;ImmutableBag&lt;/em&gt; with the specified vararg’d elements. There are &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;mutable&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;immutable&lt;/a&gt; Collection factories in Eclipse Collections.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/bag/ImmutableBagMultimap.html#get-K-&quot;&gt;get&lt;/a&gt; — Returns a Collection from a &lt;em&gt;Multimap&lt;/em&gt;. In the case of an &lt;em&gt;ImmutableBagMultimap&lt;/em&gt; returns an &lt;em&gt;ImmutableBag&lt;/em&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=7ca219358c3b&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/ec-by-example-groupby-7ca219358c3b&quot;&gt;EC by Example: GroupBy&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Wed, 02 Jan 2019 00:46:32 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: JSON Forms goes Mobile with Ionic</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40804</guid>
	<link>https://eclipsesource.com/blogs/2018/12/21/json-forms-goes-mobile-with-ionic/</link>
	<description>&lt;p&gt;The last couple of weeks we’ve been busy with completing an Ionic 3 based renderer set to JSON Forms. If you don’t...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/21/json-forms-goes-mobile-with-ionic/&quot; rel=&quot;nofollow&quot;&gt;JSON Forms goes Mobile with Ionic&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 21 Dec 2018 13:09:15 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse TLP Contributors by Quarter</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5477</guid>
	<link>https://waynebeaton.wordpress.com/2018/12/20/eclipse-tlp-contributors-by-quarter/</link>
	<description>&lt;p&gt;Alexander posted an interesting tweet the other day.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;92 different contributors to Eclipse in the last 3 months aka 4.10 . This is probably(not checked) a record high !!! &lt;a href=&quot;https://t.co/AP6bHj5G3g&quot;&gt;https://t.co/AP6bHj5G3g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Alexander Kurtakov (@akurtakov) &lt;a href=&quot;https://twitter.com/akurtakov/status/1074604537053212672?ref_src=twsrc%5Etfw&quot;&gt;December 17, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I decided to take a harder look at the data to see if he’s right. It turns out that he’s not. According to my data, the &lt;a href=&quot;https://projects.eclipse.org/projects/eclipse&quot;&gt;Eclipse Top Level Project&lt;/a&gt; (TLP) had the largest number of contributors, &lt;strong&gt;120&lt;/strong&gt;, in 2014Q1.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;eclipse_contributors_quarterly&quot; class=&quot;alignnone size-full wp-image-5478&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/12/eclipse_contributors_quarterly.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Still, &lt;strong&gt;70&lt;/strong&gt; in 2018Q4 is pretty good. And the quarter isn’t even over yet. Those spikes in the chart notwithstanding, the healthy upward contribution trend is encouraging.&lt;/p&gt;
&lt;p&gt;Note that my numbers are a little different than Alexander’s. His are based on the last three months worth of contributions as of the day that he parsed the chart data. My data is based strictly on traditional quarter boundaries (so his number includes some commits made in September that mine disregards).&lt;/p&gt;
&lt;p&gt;Normally, I restrict the date range on these sorts of queries, but I decided to run against the full history. You’ll notice that it looks like we had no committers before 2005: we didn’t keep committer records in our database before the Eclipse Foundation was created in 2005.&lt;/p&gt;
&lt;p&gt;These numbers represent only commits pushed to Git repositories owned by Projects that fall under the &lt;a href=&quot;https://projects.eclipse.org/projects/eclipse&quot;&gt;Eclipse Top Level Project&lt;/a&gt;, which only a fraction of the activity that occurs Eclipse Foundation open source projects.&lt;/p&gt;</description>
	<pubDate>Thu, 20 Dec 2018 21:22:01 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.12 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink186</guid>
	<link>http://eclipse.org/webtools/releases/3.12</link>
	<description>&lt;div&gt;
      The Eclipse Web Tools Platform 3.12 has been released!  &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt; and update can be performed using the
      &lt;a href=&quot;http://download.eclipse.org/releases/2018-12/&quot;&gt;SimRel 2018-12 Update Site&lt;/a&gt; or through the &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;.
      Release 3.12 is included in the 2018-12
          &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2018-12/r/eclipse-ide-enterprise-java-developers&quot;&gt;Eclipse IDE for Enterprise Java Developers&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2018-12/r/eclipse-ide-javascript-and-web-developers&quot;&gt;Eclipse IDE for JavaScript and Web Developers&lt;/a&gt;, with selected portions also included in &lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;.  Adopters can download &lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the R3.12 built update site itself&lt;/a&gt; directly.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink186&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 20 Dec 2018 21:01:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to 2018-12</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40835</guid>
	<link>https://eclipsesource.com/blogs/2018/12/20/eclipsesource-oomph-profile-updated-to-2018-12/</link>
	<description>&lt;p&gt;Yesterday, Eclipse 2018-12 has been released, a new version of the Eclipse IDE and platform. It contains many useful improvements, so...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/20/eclipsesource-oomph-profile-updated-to-2018-12/&quot; rel=&quot;nofollow&quot;&gt;EclipseSource Oomph Profile – updated to 2018-12&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 20 Dec 2018 15:04:12 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Development Process 2018</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/fDjlvEVMwfo/eclipse-development-process-2018</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/fDjlvEVMwfo/eclipse-development-process-2018</link>
	<description>In December 7/2018, the Eclipse Foundation's Board of Directors approved a new edition of the Eclipse Development Process (EDP) which introduces one particularly significant change, along with a small number of other useful changes.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/fDjlvEVMwfo&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Dec 2018 14:35:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Drives $9 Billion in Open Source Innovation</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/V24pkjx8Ki4/Eclipse-Foundation-Drives-9-Billion-in-Open-Source-Innovation.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/V24pkjx8Ki4/Eclipse-Foundation-Drives-9-Billion-in-Open-Source-Innovation.html</link>
	<description>Global open source foundation finishes 2018 with 360+ open source projects, 162+ million lines of code written and more than 275 sponsor members&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/V24pkjx8Ki4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Dec 2018 14:35:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.19.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40783</guid>
	<link>https://eclipsesource.com/blogs/2018/12/19/emf-forms-and-emf-client-platform-1-19-0-released/</link>
	<description>&lt;p&gt;We are happy to announce that with the Eclipse Release 2018-12, we have also shipped  EMF Forms and EMF Client Platform...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/19/emf-forms-and-emf-client-platform-1-19-0-released/&quot; rel=&quot;nofollow&quot;&gt;EMF Forms and EMF Client Platform 1.19.0 released!&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 19 Dec 2018 14:08:31 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Development Process 2018</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5475</guid>
	<link>https://waynebeaton.wordpress.com/2018/12/19/eclipse-development-process-2018/</link>
	<description>&lt;p&gt;On December 7/2018, the Eclipse Foundation’s Board of Directors approved a new edition of the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP) which introduces one particularly significant change, along with a small number of other useful changes. We rolled this new edition out on December 14/2018.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that project teams who are familiar with the previous edition of the EDP can just keep doing what they’ve always done: all changes in this new edition are backwards compatible.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The big change is the introduction of &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_3_5_Progress_Review&quot;&gt;Progress Reviews&lt;/a&gt;&lt;/em&gt; and the recast of &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_3_3_Release_Review&quot;&gt;Release Reviews&lt;/a&gt; as a type of Progress Review. Progress Reviews are basically the same as Release Reviews with the exception that they can occur at any point in the project lifecycle (while the EDP doesn’t explicitly make any specific requirements, Release Reviews are generally accepted to be timed near the end of a release cycle). The basic idea is that a project team can opt to time a Progress Review at their convenience.&lt;/p&gt;
&lt;p&gt;Progress Reviews are not in and of themselves interesting. What is interesting is that a project team can declare as many official releases as they’d like for an entire year following a successful Progress Review or Release Review. This should be especially interesting and valuable to projects that need to make very frequent releases.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_5473&quot; style=&quot;width: 653px;&quot;&gt;&lt;img alt=&quot;lifecycle&quot; class=&quot; size-full wp-image-5473 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/12/lifecycle-1.png?w=640&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The new release process looks a little something like this.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;This change in the nature of how we do releases, required that the statement that “the IP Policy has been followed and all approvals have been received” be moved from being a requirement of a Release Review to being a requirement of a release. That is, the change in the nature of releases does not change the requirement the the &lt;a href=&quot;https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Eclipse IP Policy&lt;/a&gt; be followed and that projects engage in the full &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip&quot;&gt;Eclipse IP Due Diligence Process&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Intellectual property must be properly accounted for and tracked at all times.&lt;/strong&gt; The project team must engage in the Eclipse IP Due Diligence Process on an ongoing basis. The IP Log review and approval that occurs at the time of either a Release Review or Progress Review should be regarded as a means of confirming that intellectual property is being properly managed and not as a trigger to engage in a last minute clean up.&lt;/p&gt;
&lt;p&gt;Only intellectual property that has been been approved (or &lt;a href=&quot;https://waynebeaton.wordpress.com/2017/01/12/license-certification-due-diligence/&quot;&gt;license certified&lt;/a&gt;) by the Eclipse IP Team may be included in a release.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In addition to the IP Policy, project teams are expected to continue to engage in the usual sorts of community building activities like open and transparent release planning.&lt;/p&gt;
&lt;p&gt;The new edition also includes the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A long-missing &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#edp-terms&quot;&gt;Terms and Definitions&lt;/a&gt; section has been added;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_4_Releases&quot;&gt;Releases section&lt;/a&gt; has been restructured and is (hopefully) more easily parsed;&lt;/li&gt;
&lt;li&gt;The content is captured in Asciidoc and rendered using Asciidoctor; and&lt;/li&gt;
&lt;li&gt;All anchors in the document are self-referential links (which make it easier to get links into the document).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A more comprehensive list of the changes is captured in the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#changelog&quot;&gt;change log&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll push out updates to the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/&quot;&gt;Eclipse Project Handbook&lt;/a&gt; that support these changes later this week.&lt;/p&gt;</description>
	<pubDate>Wed, 19 Dec 2018 13:12:23 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 7: Pipeline Support</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-7472654809600166607</guid>
	<link>http://codeandme.blogspot.com/2018/12/jenkins-7-pipeline-support.html</link>
	<description>Next step in our Jenkins tutorials is to add support for &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/getting-started/&quot; target=&quot;_blank&quot;&gt;pipeline builds&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_07_pipeline.zip?raw=true&quot; target=&quot;_blank&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_07_pipeline.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/07_pipeline&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Adjusting the code&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Good news first: our code (including jelly) from the &lt;a href=&quot;https://codeandme.blogspot.com/2018/12/jenkins-6-advanced-configuration-area.html&quot; target=&quot;_blank&quot;&gt;previous tutorial&lt;/a&gt; is ready to be used in pipeline without change. There are some &lt;a href=&quot;https://jenkins.io/doc/developer/plugin-development/pipeline-integration/&quot; target=&quot;_blank&quot;&gt;considerations to be taken&lt;/a&gt; when writing pipeline plugins, but we already took care of this.&lt;br /&gt;&lt;br /&gt;In pipeline each build step needs a name to be addressed. By default this would be the class name and a call would look like this:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;step([$class: 'HelloBuilder', buildMessage: 'Hello from pipeline'])&lt;/pre&gt;&lt;br /&gt;When using the &lt;i&gt;@Symbol&lt;/i&gt; annotation on the &lt;i&gt;Descriptor&lt;/i&gt; we can provide a nicer name for our build step.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Adding dependencies to the execution environment&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Our current test target does not support pipeline jobs as we did not add the right dependencies to the pom file so far. We will first see how to add dependencies in general, in the next step we will fix the build afterwards.&lt;br /&gt;&lt;br /&gt;To add support for pipeline, add following definition to your &lt;i&gt;pom.xml&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;dependencies&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.jenkins-ci.plugins.workflow&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;workflow-aggregator&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;/dependencies&amp;gt;&lt;/pre&gt;&lt;br /&gt;We always need &lt;i&gt;groupId&lt;/i&gt;, &lt;i&gt;artifactId&lt;/i&gt; and a &lt;i&gt;version&lt;/i&gt;. To get these parameters you would typically &lt;a href=&quot;https://plugins.jenkins.io/workflow-aggregator&quot; target=&quot;_blank&quot;&gt;look up a plugin on the Jenkins plugin site&lt;/a&gt;. Locate the link to the &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt; (Github) and open the &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin/blob/master/pom.xml&quot; target=&quot;_blank&quot;&gt;pom.xml&lt;/a&gt; of the corresponding plugin. There you will find definitions for &lt;i&gt;groupId&lt;/i&gt; and &lt;i&gt;artifactId&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Available versions can be found on the &lt;a href=&quot;https://repo.jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins Artifactory server&lt;/a&gt; (we added this server to our pom already). There navigate to the &lt;i&gt;public&lt;/i&gt; folder, then follow the structure down, first opening folder from the &lt;i&gt;groupId&lt;/i&gt; followed by the &lt;i&gt;artifactId&lt;/i&gt;. For the pipeline dependency we would open &lt;i&gt;public/org/jenkins-ci/plugins/workflow/workflow-aggregator&lt;/i&gt;. &lt;a href=&quot;https://repo.jenkins-ci.org/list/public/org/jenkins-ci/plugins/workflow/workflow-aggregator/2.6/&quot; target=&quot;_blank&quot;&gt;Latest version at the time of writing&lt;/a&gt; is 2.6.&lt;br /&gt;&lt;br /&gt;Setting the &lt;i&gt;scope&lt;/i&gt; to &lt;i&gt;test&lt;/i&gt; means that we do not have a build dependency on the plugin. Instead we need it only deployed and enabled on our test instance.&lt;br /&gt;&lt;br /&gt;When adding build dependencies you should run&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes eclipse:eclipse&lt;/pre&gt;like we did in the first tutorial. It will update the &lt;i&gt;.classpath&lt;/i&gt; file in your eclipse project, automatically adding required libraries to the build path. Take care that also the &lt;i&gt;.project&lt;/i&gt; file gets rewritten!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 3: Dependency Resolution&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We added our dependency, so everything should be done, right?&lt;br /&gt;Wrong! The &lt;i&gt;maven-enforcer-plugin&lt;/i&gt; &lt;a href=&quot;https://maven.apache.org/enforcer/enforcer-rules/requireUpperBoundDeps.html&quot; target=&quot;_blank&quot;&gt;verifies plugin dependencies&lt;/a&gt; for us and will detect some incompatibilities, eg:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;Require upper bound dependencies error for org.jenkins-ci.plugins:script-security:1.39 paths to dependency are:&lt;br /&gt;+-com.codeandme:builder.hello:1.0-SNAPSHOT&lt;br /&gt;  +-org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6&lt;br /&gt;    +-org.jenkins-ci.plugins.workflow:workflow-support:2.20&lt;br /&gt;      +-org.jenkins-ci.plugins:script-security:1.39&lt;br /&gt;and&lt;br /&gt;+-com.codeandme:builder.hello:1.0-SNAPSHOT&lt;br /&gt;  +-org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6&lt;br /&gt;    +-org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.22&lt;br /&gt;      +-org.jenkins-ci.plugins:script-security:1.39&lt;br /&gt;and&lt;br /&gt;+-com.codeandme:builder.hello:1.0-SNAPSHOT&lt;br /&gt;  +-org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6&lt;br /&gt;    +-org.6wind.jenkins:lockable-resources:2.3&lt;br /&gt;      +-org.jenkins-ci.plugins:script-security:1.26&lt;br /&gt;...&lt;/pre&gt;This is one of multiple dependency conflicts detected. It seems that maven at first resolves the dependency with the lowest version number. As some plugins need a newer version, we need to resolve the dependency by our own.&lt;br /&gt;&lt;br /&gt;The simplest way I found is to check for the highest version of the required plugin (in the upper case: script-security) and add it to our dependencies sections in the &lt;i&gt;pom.xml&lt;/i&gt; file. I was hoping for some maven help on this process, but failed. So I ended up adding required dependencies manually until the build was satisfied.&lt;br /&gt;&lt;br /&gt;You might run into other build problems, eg after adding a &lt;i&gt;test&lt;/i&gt; dependency to the &lt;i&gt;symbol-annotation&lt;/i&gt; plugin, my build started to fail, not being able to resolve &lt;i&gt;Symbol.class&lt;/i&gt; anymore. Reason is that &lt;i&gt;symbol-annotation&lt;/i&gt; is actually a &lt;i&gt;build&lt;/i&gt; dependency rather than a &lt;i&gt;test&lt;/i&gt; dependency. By binding it to the &lt;i&gt;test&lt;/i&gt; scope only we broke the build.&lt;br /&gt;&lt;br /&gt;Once you sorted out all dependencies (&lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/jenkins/07_pipeline/builder.hello/pom.xml&quot; target=&quot;_blank&quot;&gt;see resulting pom.xml&lt;/a&gt;) your test instance will be able to run pipeline jobs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 4: Testing the Build Step in Pipeline&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;On your test instance create a new &lt;i&gt;Pipeline&lt;/i&gt; and add following &lt;i&gt;script&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;node {&lt;br /&gt;    stage('Greetings') {&lt;br /&gt;        greet buildDelay: 'long', buildMessage: 'Hello pipeline build'&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;Coding the command line for our build step can either be done manually or by using the &lt;i&gt;Pipeline Syntax&lt;/i&gt; helper. The link is available right below the &lt;i&gt;Script&lt;/i&gt; section in your job configuration. Jenkins makes use of our previous jelly definitions to display a visual helper for the &lt;i&gt;Hello Build&lt;/i&gt; step. We may set all optional parameters on the UI and let Jenkins create the command line to be used in the pipeline script.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-NknsyjGDLnM/XBjRQiZXAkI/AAAAAAAABFg/fkARlPXG-dw3sKPdzuLPU7f2uCj0dJVsQCLcBGAs/s1600/jenkins.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;456&quot; src=&quot;https://4.bp.blogspot.com/-NknsyjGDLnM/XBjRQiZXAkI/AAAAAAAABFg/fkARlPXG-dw3sKPdzuLPU7f2uCj0dJVsQCLcBGAs/s640/jenkins.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;</description>
	<pubDate>Tue, 18 Dec 2018 11:28:24 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 2: A Builder Plugin &amp; Some Jelly</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-7581451498191257505</guid>
	<link>http://codeandme.blogspot.com/2018/11/jenkins-2-builder-plugin-some-jelly.html</link>
	<description>In the previous tutorial we did the basic setup for jenkins plugin development. Now we will try to create a plugin that actually runs a build step.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_02_builder_plugin.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_02_builder_plugin.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/02_builder_plugin&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: The Basic Builder&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Maven allows to create a nice template for a builder plugin by calling&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn archetype:generate -Dfilter=io.jenkins.archetypes:&lt;/pre&gt;then select the &lt;i&gt;hello-world-plugin&lt;/i&gt;. But as we want to do it the hard way, we will add every single bit on our own and continue with the &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/01_empty_plugin&quot; target=&quot;_blank&quot;&gt;empty project&lt;/a&gt; from our &lt;a href=&quot;https://codeandme.blogspot.com/2018/11/jenkins-1-ide-setup-and-empty-plugin.html&quot; target=&quot;_blank&quot;&gt;previous tutorial&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The first thing we need is a class to implement our builder. Lets create a simple one. Create a new class &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilder&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;package com.codeandme.jenkins.builder;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;&lt;br /&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder() {&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Symbol(&quot;hello&quot;)&lt;br /&gt; @Extension&lt;br /&gt; public static final class Descriptor extends BuildStepDescriptor&amp;lt;Builder&amp;gt; {&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public boolean isApplicable(Class&amp;lt;? extends AbstractProject&amp;gt; aClass) {&lt;br /&gt;   return true;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public String getDisplayName() {&lt;br /&gt;   return &quot;Code &amp;amp; Me - Hello World&quot;;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Jenkins expects the constructor to be augmented with the &lt;i&gt;@DataBoundConstructor&lt;/i&gt; annotation. Later we will add our build parameters to it.&lt;br /&gt;&lt;br /&gt;The &lt;i&gt;perform()&lt;/i&gt; method is the heart of our implementation. This is where we define what the build step should actually do. In this tutorial we focus on the definition, not the execution so we are just printing some log message to detect that our build step got triggered.&lt;br /&gt;&lt;br /&gt;Now lets put our focus on the &lt;i&gt;Descriptor&lt;/i&gt; class. It actually describes what our plugin looks like, what parameter it uses and whether the user input is valid or not. You need to use a static class as a descriptor and augment it with the &lt;i&gt;@Extension&lt;/i&gt; annotation to allow jenkins to detect it automatically.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;isApplicable()&lt;/i&gt; might be the most important one as it denotes if ou plugin is usable for the current project type.&lt;br /&gt;&lt;br /&gt;Start a jenkins test server using&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn hpi:run -Djetty.port=8090&lt;/pre&gt;Create a new &lt;i&gt;Freestyle Project&lt;/i&gt; and add your custom build step to it. Then execute the job and browse the log for our log message.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Build Considerations&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;When writing a plugin it is vital to understand which parts of the plugin do get executed on the master and which ones on a slave machine. The java code we just wrote does get executed on the master only. Even when a job is executed on a slave machine, the perform() method still gets executed on master. Therefore we cannot use classic java libraries like NIO or the ProcessBuilder to access and execute stuff on the slave. Instead we need to use abstractions like the workspace and the launcher parameters we get from Jenkins. These objects will take care to delegate IO calls or program executions to the slave.&lt;br /&gt;&lt;br /&gt;Make sure you always keep focus which parts of your code get executed where.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Basic UI&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Next we need a &lt;i&gt;*.jelly&lt;/i&gt; file to describe how the UI should look like. Therefore create a new package in &lt;i&gt;src/main/resources&lt;/i&gt; named &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilder&lt;/i&gt;. That is right, the package equals the class name of our builder class. Then create a &lt;i&gt;config.jelly&lt;/i&gt; file inside that package:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;?jelly escape-by-default='true'?&amp;gt;&lt;br /&gt;&amp;lt;j:jelly xmlns:j=&quot;jelly:core&quot; xmlns:st=&quot;jelly:stapler&quot; xmlns:d=&quot;jelly:define&quot; xmlns:l=&quot;/lib/layout&quot; xmlns:t=&quot;/lib/hudson&quot; xmlns:f=&quot;/lib/form&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;f:block&amp;gt;&lt;br /&gt;  &amp;lt;h1&amp;gt;Code &amp;amp;amp; Me Productions&amp;lt;/h1&amp;gt;&lt;br /&gt;  &amp;lt;p&amp;gt;We build the best &amp;lt;i&amp;gt;hellos&amp;lt;/i&amp;gt; in the world&amp;lt;/p&amp;gt;&lt;br /&gt; &amp;lt;/f:block&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/j:jelly&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Inside the jelly definition we can use plain HTML code. Run your test instance again to see your changes in your project configuration view.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 3: Checkbox Input&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Time to add some input. All build parameters need at least 2 steps of implementation: first we need to define the UI in the &lt;i&gt;config.jelly&lt;/i&gt; file, then we need to define the parameters in the java class. Optionally we may add additional checks in the Descriptor class.&lt;br /&gt;&lt;br /&gt;To define the UI for the checkbox we add following code to our jelly file:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Fail this build&quot; field=&quot;failBuild&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:checkbox /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;/pre&gt;This will create a label using the &lt;i&gt;title&lt;/i&gt; field and a checkbox on the right side of the label. The &lt;i&gt;field&lt;/i&gt; name is important as this is the ID of our field which we now use in the Java code:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private boolean fFailBuild;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(boolean failBuild) {&lt;br /&gt;  fFailBuild = failBuild;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt;&lt;br /&gt;  if (isFailBuild())&lt;br /&gt;   throw new AbortException(&quot;Build error forced by plugin settings&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public boolean isFailBuild() {&lt;br /&gt;  return fFailBuild;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The new parameter needs to be added to our constructor. Make sure you use the same name as in the jelly file. Additionally we need a getter for our parameter. It will be queried to populate the UI when you configure your job and when the job gets executed. Jenkins expects the name of the getter to match the field name of your jelly file.&lt;br /&gt;&lt;br /&gt;During the build we evaluate our parameter and throw an &lt;i&gt;AbortException&lt;/i&gt; in case our builder is expected to fail.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 4: Adding Help&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Lots of parameters in Jenkins plugins show a help button on the righthand side of the form. These buttons automatically appear when corresponding help files exist in the right location.&lt;br /&gt;&lt;br /&gt;A general help file for the builder named &lt;i&gt;help.html&lt;/i&gt; needs to be placed next to the &lt;i&gt;config.jelly&lt;/i&gt; file. You may add any arbitrary HTML content there, with no need to use &lt;i&gt;&amp;lt;html&amp;gt;&lt;/i&gt; or &lt;i&gt;&amp;lt;body&amp;gt;&lt;/i&gt; tags.&lt;br /&gt;&lt;br /&gt;To provide help for our checkbox we create another help file named &lt;i&gt;help-failBuild.html&lt;/i&gt;. See the pattern? We again use the field ID and Jenkins figures out the rest.&lt;br /&gt;&lt;br /&gt;Instead of a plain HTML files we could also &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins#BasicguidetoJellyusageinJenkins-Helpfiles&quot; target=&quot;_blank&quot;&gt;provide jelly files&lt;/a&gt; following the same name pattern.&lt;br /&gt;&lt;br /&gt;Changes like adding help or beautifying jelly files can be done without restarting our test instance. Simply change the file and reload the page in your webbrowser of your test instance.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Further reading&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Good documentation on writing forms seems to be rare on the internet. To me the best choice seems to find an existing plugin and browse the source code for reference. At least a &lt;a href=&quot;https://reports.jenkins.io/core-taglib/jelly-taglib-ref.html#form&quot; target=&quot;_blank&quot;&gt;list of all control types&lt;/a&gt; is available online.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 18 Dec 2018 08:53:40 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.6.2</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-6-2</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-6-2</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.6.2, a bug fix release of Vert.x 3.6.x.&lt;/p&gt;
&lt;p&gt;There is already a 3.6.1 release but that exhibited a (Maven dependency) regression for Vert.x RxJava, so we reacted immediately and
did a 3.6.2 release to fix the issue, as RxJava is a critical component of the Vert.x stack. Therefore 3.6.2 is instead
announced.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.6.0, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;As you might know, the development of Vert.x 4 has started and therefore a few API will be deprecated in Vert.x 3.&lt;/p&gt;
&lt;p&gt;Such APIs will be deprecated step by step in Vert.x 3 with an alternative API so you can anticipate the API upgrade
in Vert.x 4 from the Vert.x 3.6, for 3.6.2 here is the list of deprecations you can find&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.2-Deprecations&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.6.2-Deprecations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vert.x 3.6.2 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.2-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.6.2-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.4%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.4/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Vert.x Web API Service Introduction</title>
	<guid isPermaLink="true">https://vertx.io/blog/vert-x-web-api-service-introduction</guid>
	<link>https://vertx.io/blog/vert-x-web-api-service-introduction</link>
	<description>&lt;article&gt;&lt;h1 id=&quot;vert-x-web-api-service&quot;&gt;Vert.x Web API Service&lt;/h1&gt;
&lt;p&gt;Vert.x 3.6 introduces a new module called &lt;code&gt;vertx-web-api-service&lt;/code&gt;. With the new Web API Services you can easily combine the &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web Router&lt;/a&gt; and the &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;Vert.x OpenAPI Router Factory&lt;/a&gt; features with &lt;a href=&quot;https://vertx.io/docs/vertx-service-proxy/java/&quot;&gt;Vert.x Services on Event Bus&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;small-recap-on-openapi-and-vert-x-web-api-contract&quot;&gt;Small recap on OpenAPI and Vert.x Web API Contract&lt;/h2&gt;
&lt;p&gt;Let’s start from this OpenAPI definition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openapi: &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;
paths:
  /api/transactions:
    get:
      operationId: getTransactionsList
      description: Get transactions list filtered by sender
      x-vertx-event-bus: transactions_manager.myapp
      parameters:
        - name: from
          &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;: query
          description: Matches exactly the email from
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    post:
      operationId: addTransaction
      x-vertx-event-bus: transactions_manager.myapp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: &lt;span class=&quot;hljs-string&quot;&gt;&quot;#/components/schemas/Transaction&quot;&lt;/span&gt;
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
  /api/transactions/{transactionId}:
    parameters:
      - name: transactionId
        &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;: path
        required: true
        schema:
          type: string
    put:
      operationId: updateTransaction
      x-vertx-event-bus: transactions_manager.myapp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: &lt;span class=&quot;hljs-string&quot;&gt;&quot;#/components/schemas/Transaction&quot;&lt;/span&gt;
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    delete:
      operationId: removeTransaction
      x-vertx-event-bus: transactions_manager.myapp
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
components:
  schemas:
    Transaction: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    Error: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We defined &lt;code&gt;getTransactionsList&lt;/code&gt;, &lt;code&gt;addTransaction&lt;/code&gt;, &lt;code&gt;updateTransaction&lt;/code&gt; and &lt;code&gt;removeTransaction&lt;/code&gt; operations. Now with &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; we create a &lt;code&gt;Router&lt;/code&gt; that accepts this various operation requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;OpenAPI3RouterFactory.create(vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;src/main/resources/petstore.yaml&quot;&lt;/span&gt;, ar -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Spec loaded with success&lt;/span&gt;
    OpenAPI3RouterFactory routerFactory = ar.result();
    routerFactory.addHandlerByOperationId(&lt;span class=&quot;hljs-string&quot;&gt;&quot;getTransactionsList&quot;&lt;/span&gt;, routingContext -&amp;gt; {
      RequestParameters params = routingContext.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;parsedParameters&quot;&lt;/span&gt;);
      RequestParameter from = params.queryParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;&lt;/span&gt;);
      &lt;span class=&quot;hljs-comment&quot;&gt;// getTransactionsList business logic&lt;/span&gt;
    });
    &lt;span class=&quot;hljs-comment&quot;&gt;// add handlers for addTransaction, updateTransaction and removeTransaction&lt;/span&gt;
    Router router = routerFactory.getRouter();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Something went wrong during router factory initialization&lt;/span&gt;
    Throwable exception = ar.cause();
    &lt;span class=&quot;hljs-comment&quot;&gt;// Log exception, fail verticle deployment ... etc&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; provides an easy way to create a specification compliant &lt;code&gt;Router&lt;/code&gt;, but it doesn’t provide a mechanism to decouple the business logic from your operation handlers.&lt;/p&gt;
&lt;p&gt;In a typical Vert.x application, when you receive a request to your router, you would forward it to an event bus endpoint that performs some actions and sends the result back to the operation handler.&lt;/p&gt;
&lt;p&gt;Vert.x Web API Service simplifies that integration between &lt;code&gt;RouterFactory&lt;/code&gt; and &lt;code&gt;EventBus&lt;/code&gt; with a new code generator. The final result is a &lt;em&gt;loose coupling&lt;/em&gt; between the Web Router logic and your business logic.&lt;/p&gt;
&lt;h2 id=&quot;let-s-get-started-with-vert-x-web-api-services-&quot;&gt;Let’s get started with Vert.x Web Api Services!&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;vertx-web-api-service&lt;/code&gt; you need to add a couple of dependencies to your project. In a Maven POM file that would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;vertx-codegen&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.6.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;classifier&lt;/span&gt;&amp;gt;&lt;/span&gt;processor&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;classifier&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;vertx-web-api-service&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.6.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will proceed in this order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model the service interface&lt;/li&gt;
&lt;li&gt;Rewrite it to work with Web Api Services&lt;/li&gt;
&lt;li&gt;Implement the service&lt;/li&gt;
&lt;li&gt;Mount the service on the event bus&lt;/li&gt;
&lt;li&gt;Use the router factory to build a router with handlers that connects to our event bus services&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;model-your-service&quot;&gt;Model your service&lt;/h2&gt;
&lt;p&gt;Let’s say that we want to model a service that manages all operations regarding CRUD transactions. An example interface for this asynchronous service could be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerService&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List from, Handler&amp;gt;&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Transaction transaction, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, Transaction transaction, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;removeTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each operation, we have some parameters, depending on the operation, and a callback (&lt;code&gt;resultHandler&lt;/code&gt;) that should be called when the operation succeeds or fails.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://vertx.io/docs/vertx-service-proxy/java/&quot;&gt;Vert.x Service Proxy&lt;/a&gt;, you can define an event bus service with a Java interface similar to the one we just saw and then annotate it with &lt;code&gt;@ProxyGen&lt;/code&gt;. This annotation will generate a &lt;em&gt;service handler&lt;/em&gt; for the defined service that can be plugged to the event bus with &lt;code&gt;ServiceBinder&lt;/code&gt;. &lt;code&gt;vertx-web-api-service&lt;/code&gt; works in a very similar way: you need to annotate the Java interface with &lt;code&gt;@WebApiServiceGen&lt;/code&gt; and it will generate the service handler for the event bus.&lt;/p&gt;
&lt;p&gt;Let’s rewrite the &lt;code&gt;TransactionsManagerService&lt;/code&gt; to work with Web API Service:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.web.api.*;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.web.api.generator.WebApiServiceGen;

&lt;span class=&quot;hljs-annotation&quot;&gt;@WebApiServiceGen&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerService&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List from, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Transaction body, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, Transaction body, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;removeTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// Factory method to instantiate the implementation&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; TransactionsManagerService &lt;span class=&quot;hljs-title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Vertx vertx)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerServiceImpl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(vertx)&lt;/span&gt;&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all, look at the annotation &lt;code&gt;@WebApiServiceGen&lt;/code&gt;. This annotation will trigger the code generator that generates the event bus handler for this service. Each method has the same two last parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OperationRequest context&lt;/code&gt;: this data object contains the headers and the parameters of the HTTP request&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handler&amp;gt; resultHandler&lt;/code&gt;: this callback accepts an &lt;code&gt;OperationResponse&lt;/code&gt; data object that will encapsulate the body of the result, the status code, the status message and the headers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The generated handler receives only the &lt;code&gt;OperationRequest&lt;/code&gt; data object and extracts from it all operation parameters. For example, when the router receives a request at &lt;code&gt;getTransactionsList&lt;/code&gt;, it sends to &lt;code&gt;TransactionsManagerService&lt;/code&gt; the &lt;code&gt;OperationRequest&lt;/code&gt; containing the &lt;code&gt;RequestParameters&lt;/code&gt; map. From this map, the service generated handler extracts the &lt;code&gt;from&lt;/code&gt; parameter. &lt;/p&gt;
&lt;p&gt;Therefore &lt;strong&gt;operation parameters names should match method parameter names&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When you want to extract the body you must use &lt;code&gt;body&lt;/code&gt; keyword. For more details, please refer to the &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;implement-the-service&quot;&gt;Implement the service&lt;/h2&gt;
&lt;p&gt;Now that you have your interface, you can implement the service:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerServiceImpl&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerService&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Vertx vertx;

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerServiceImpl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Vertx vertx)&lt;/span&gt; &lt;/span&gt;{  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.vertx = vertx;  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List from, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// Write your business logic here&lt;/span&gt;
    resultHandler.handle(Future.succeededFuture(OperationResult.completedWithJson(resultJson)));
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// Implement other operations&lt;/span&gt;

}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the &lt;code&gt;OperationResult&lt;/code&gt; documentation to look at various handy methods to create a complete response.&lt;/p&gt;
&lt;h2 id=&quot;mount-the-service&quot;&gt;Mount the Service&lt;/h2&gt;
&lt;p&gt;Now that you have your service interface and implementation, you can mount your service with &lt;code&gt;ServiceBinder&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;ServiceBinder serviceBinder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ServiceBinder(vertx);

TransactionsManagerService transactionsManagerService = TransactionsManagerService.create(vertx);
registeredConsumers.add(
  serviceBinder
    .setAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;transactions_manager.myapp&quot;&lt;/span&gt;)
    .register(TransactionsManagerService.class, transactionsManagerService)
);&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;and-the-router-factory-&quot;&gt;And the Router Factory?&lt;/h2&gt;
&lt;p&gt;The service is up and running, but we need to connect it to the &lt;code&gt;Router&lt;/code&gt; built by &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;OpenAPI3RouterFactory.create(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my_spec.yaml&quot;&lt;/span&gt;, openAPI3RouterFactoryAsyncResult -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (openAPI3RouterFactoryAsyncResult.succeeded()) {
    OpenAPI3RouterFactory routerFactory = openAPI3RouterFactoryAsyncResult.result();
    &lt;span class=&quot;hljs-comment&quot;&gt;// Mount services on event bus based on extensions&lt;/span&gt;
    routerFactory.mountServicesFromExtensions(); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- Pure magic happens!&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// Generate the router&lt;/span&gt;
    Router router = routerFactory.getRouter();
    server = vertx.createHttpServer(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpServerOptions().setPort(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;));
    server.requestHandler(router).listen();
    &lt;span class=&quot;hljs-comment&quot;&gt;// Initialization completed&lt;/span&gt;
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Something went wrong during router factory initialization&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our spec example we added an extension &lt;code&gt;x-vertx-event-bus&lt;/code&gt; to each operation that specifies the address of the service. Using this extension, you only need to call &lt;code&gt;OpenAPI3RouterFactory.mountServicesFromExtensions()&lt;/code&gt; to trigger a scan of all operations and mount all found service addresses. For each operation that contains &lt;code&gt;x-vertx-event-bus&lt;/code&gt;, the Router Factory instantiates an handler that routes the incoming requests to the address you specified.&lt;/p&gt;
&lt;p&gt;This is one of the methods you can use to match services with router operation handlers. Check the documentation for all details.&lt;/p&gt;
&lt;h2 id=&quot;more-examples&quot;&gt;More examples&lt;/h2&gt;
&lt;p&gt;Check out the complete example in &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/web-api-service-example&quot;&gt;vertx-examples repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks you for your time, stay tuned for more updates! And please provide feedback about this new package!&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
</item>

</channel>
</rss>
